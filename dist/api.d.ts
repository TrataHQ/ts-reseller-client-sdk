/**
 * Trata AI API
 * Human like conversation to answer calls, drive engagement, automate follow-ups & schedule bookings 24/7  with end to end integrations ensuring you never miss a sales enquiry.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AIAgentInput
 */
export interface AIAgentInput {
    /**
     * Name of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    name: string;
    /**
     * Image URL for the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    imageUrl: string;
    /**
     * Mission of the AI agent
     * @type {Mission}
     * @memberof AIAgentInput
     */
    mission?: Mission | null;
    /**
     * Status of the AI agent
     * @type {Status}
     * @memberof AIAgentInput
     */
    status: Status;
    /**
     * Role of the AI agent in the company
     * @type {string}
     * @memberof AIAgentInput
     */
    role: string;
    /**
     * Description of the role of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    roleDescription: string;
    /**
     * Timezone of the AI agent used for scheduling meetings
     * @type {string}
     * @memberof AIAgentInput
     */
    timezone: string;
    /**
     * Voice of the AI agent
     * @type {VoiceInput}
     * @memberof AIAgentInput
     */
    voice?: VoiceInput | null;
}
/**
 * AI agent configured by businesses
 * @export
 * @interface AIAgentOutput
 */
export interface AIAgentOutput {
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    imageUrl?: string;
    /**
     *
     * @type {Mission}
     * @memberof AIAgentOutput
     */
    mission?: Mission | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    roleDescription?: string;
    /**
     *
     * @type {Transcriber}
     * @memberof AIAgentOutput
     */
    transcriber?: Transcriber | null;
    /**
     *
     * @type {IntelligenceProvider}
     * @memberof AIAgentOutput
     */
    intelligenceProvider?: IntelligenceProvider | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof AIAgentOutput
     */
    voice?: VoiceOutput | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    timezone?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Accent {
    American = "American",
    Indian = "Indian",
    Australian = "Australian",
    British = "British",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface AcceptInviteRequest
 */
export interface AcceptInviteRequest {
    /**
     * Name of the user
     * @type {string}
     * @memberof AcceptInviteRequest
     */
    name?: string | null;
}
/**
 *
 * @export
 * @interface ActionInput
 */
export interface ActionInput {
    /**
     * Name of the action
     * @type {string}
     * @memberof ActionInput
     */
    name: string;
    /**
     * Description about the action and it should also contain when the action should be triggered
     * @type {string}
     * @memberof ActionInput
     */
    description?: string | null;
    /**
     * Parameters for the action. It should be a JSON schema object
     * @type {object}
     * @memberof ActionInput
     */
    parameters: object;
    /**
     * Endpoint for the action
     * @type {HttpActionEndpoint | InternalActionEndpoint}
     * @memberof ActionInput
     */
    endpoint: HttpActionEndpoint | InternalActionEndpoint;
    /**
     * Text to be rendered to user when action is invoked
     * @type {string}
     * @memberof ActionInput
     */
    userWaitingText?: string | null;
    /**
     * Text to be rendered to user when action is successful
     * @type {string}
     * @memberof ActionInput
     */
    userSuccessText?: string | null;
    /**
     * Text to be rendered to user when action is not successful
     * @type {string}
     * @memberof ActionInput
     */
    userErrorText?: string | null;
    /**
     * Trigger who invokes the action
     * @type {ActionInvocationTrigger}
     * @memberof ActionInput
     */
    invocationTrigger: ActionInvocationTrigger;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ActionInvocationTrigger {
    UserQuery = "user_query",
    WebhookConversationStart = "webhook.conversation_start",
    WebhookConversationEnd = "webhook.conversation_end"
}
/**
 * Action entity to store the actions which can be performed by ai agents
 * @export
 * @interface ActionOutput
 */
export interface ActionOutput {
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    description?: string | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    parameters?: object | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    endpoint?: object | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    invocationTrigger?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userWaitingText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userSuccessText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userErrorText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface AddressInput
 */
export interface AddressInput {
    /**
     * Address line 1
     * @type {string}
     * @memberof AddressInput
     */
    line1: string;
    /**
     * Address line 2
     * @type {string}
     * @memberof AddressInput
     */
    line2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof AddressInput
     */
    city?: string | null;
    /**
     * State
     * @type {string}
     * @memberof AddressInput
     */
    state?: string | null;
    /**
     * Country
     * @type {string}
     * @memberof AddressInput
     */
    country: string;
}
/**
 *
 * @export
 * @interface AddressOutput
 */
export interface AddressOutput {
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line1: string;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line2: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    city: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    state: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    country: string | null;
}
/**
 *
 * @export
 * @interface AgentConfig
 */
export interface AgentConfig {
    /**
     * Enum class representing transcriber
     * @type {string}
     * @memberof AgentConfig
     */
    transcriber: string;
    /**
     * Enum class representing intelligence provider
     * @type {string}
     * @memberof AgentConfig
     */
    intelligenceProvider: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    synthesizer: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    embeddingsModelConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    hiveStorageConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    fillersConfig?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationFormula {
    COUNT = "COUNT",
    SUM = "SUM",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationPeriod {
    MONTHLY = "MONTHLY",
    WEEKLY = "WEEKLY",
    DAILY = "DAILY"
}
/**
 *
 * @export
 * @interface ApiKeyRequest
 */
export interface ApiKeyRequest {
    /**
     *
     * @type {string}
     * @memberof ApiKeyRequest
     */
    key_type?: string | null;
}
/**
 *
 * @export
 * @interface AvailablePhoneNumber
 */
export interface AvailablePhoneNumber {
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    locality: string | null;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    region: string | null;
}
/**
 *
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * Address line 1
     * @type {string}
     * @memberof BaseResponse
     */
    message: string;
}
/**
 *
 * @export
 * @interface BatchMetricsRequests
 */
export interface BatchMetricsRequests {
    /**
     *
     * @type {Array<MetricsRequest>}
     * @memberof BatchMetricsRequests
     */
    requests: Array<MetricsRequest>;
}
/**
 *
 * @export
 * @interface BatchMetricsResponse
 */
export interface BatchMetricsResponse {
    /**
     *
     * @type {Array<MetricsResponse>}
     * @memberof BatchMetricsResponse
     */
    responses: Array<MetricsResponse>;
}
/**
 *
 * @export
 * @interface BodyCreateCustomerOrganizationV1
 */
export interface BodyCreateCustomerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateOrganizationV1
 */
export interface BodyCreateOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateResellerOrganizationV1
 */
export interface BodyCreateResellerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateResellerOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateResellerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1
 */
export interface BodyUploadFileV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadFileV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @interface BodyUploadResellerFilesV1
 */
export interface BodyUploadResellerFilesV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadResellerFilesV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CallSentiment {
    Positive = "positive",
    Negative = "negative",
    Neutral = "neutral"
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Notes or comments to record
     * @type {string}
     * @memberof Comment
     */
    comment: string;
    /**
     * Star rating to record
     * @type {number}
     * @memberof Comment
     */
    rating: number;
}
/**
 * This represents the connection between the user and the assistant
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    sourceName?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    sourceId?: string;
    /**
     *
     * @type {object}
     * @memberof Connection
     */
    sourceProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    agentId?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConnectionSource
 */
export interface ConnectionSource {
    /**
     * Name of the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceName?: ConnectionSourceSourceNameEnum;
    /**
     * Unique identifier for the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceId: string;
    /**
     * Extra properties of source
     * @type {object}
     * @memberof ConnectionSource
     */
    sourceProps: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConnectionSourceSourceNameEnum {
    TWILIO = "TWILIO",
    PLIVO = "PLIVO",
    BROWSER = "BROWSER"
}
/**
 * Expected output of the post conversation task
 * @export
 * @interface ConversationAnalyticsModel
 */
export interface ConversationAnalyticsModel {
    /**
     * Summary of the conversation happened with important details on the conversation. The summary should be concise and to the point. It should contain the important details of the conversation like name, phone number, email, address and any other details shared by the user.
     * @type {string}
     * @memberof ConversationAnalyticsModel
     */
    summary: string;
    /**
     * List of action items and the next steps to be performed from the conversation details.
     * @type {Array<string>}
     * @memberof ConversationAnalyticsModel
     */
    action_items: Array<string> | null;
    /**
     * If the user has given consent to store the audio of the conversation. Unless the user explicitly says yes, this should be false.
     * @type {boolean}
     * @memberof ConversationAnalyticsModel
     */
    is_audio_consent_given: boolean;
    /**
     * Extracted email address of the caller from the conversation details. Email should be a valid email address format
     * @type {string}
     * @memberof ConversationAnalyticsModel
     */
    email_address_of_caller: string | null;
    /**
     * Extracted name of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModel
     */
    name_of_caller: string | null;
    /**
     * Extracted phone number of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModel
     */
    phone_number_of_caller: string | null;
    /**
     * Extracted address of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModel
     */
    address_of_caller: string | null;
    /**
     * Sentiment of the caller based on the conversation details.
     * @type {CallSentiment}
     * @memberof ConversationAnalyticsModel
     */
    sentiment_of_caller: CallSentiment;
    /**
     * Status of the prospect after this conversation.
     * @type {ProspectStatus}
     * @memberof ConversationAnalyticsModel
     */
    prospectStatus: ProspectStatus | null;
}
/**
 *
 * @export
 * @interface ConversationEndEvent
 */
export interface ConversationEndEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationEndEventPayload}
     * @memberof ConversationEndEvent
     */
    payload?: ConversationEndEventPayload;
}
/**
 *
 * @export
 * @interface ConversationEndEventPayload
 */
export interface ConversationEndEventPayload {
    /**
     *
     * @type {ConversationOutput}
     * @memberof ConversationEndEventPayload
     */
    conversation: ConversationOutput;
}
/**
 * Any feedback added to the conversation by business is managed here.
 * @export
 * @interface ConversationFeedback
 */
export interface ConversationFeedback {
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    conversationId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    feedback?: string;
    /**
     *
     * @type {number}
     * @memberof ConversationFeedback
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConversationInput
 */
export interface ConversationInput {
    /**
     * Source from where the conversation originated. This can be device id, phone number, etc.
     * @type {string}
     * @memberof ConversationInput
     */
    source: string;
    /**
     * Type of the conversation source
     * @type {ConversationSourceType}
     * @memberof ConversationInput
     */
    sourceType: ConversationSourceType;
    /**
     * AI agent which handled the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    agentId: string;
    /**
     * URL to the full transcript of the conversation
     * @type {Array<DialogLine>}
     * @memberof ConversationInput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     * Summary of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptSummary?: string | null;
    /**
     * URL to the recording of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptRecordingUrl?: string | null;
    /**
     * Start time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampStart: string;
    /**
     * End time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModel}
     * @memberof ConversationInput
     */
    conversationAnalytics?: ConversationAnalyticsModel | null;
    /**
     * Comments from the admin on the conversation
     * @type {Array<Comment>}
     * @memberof ConversationInput
     */
    adminComments?: Array<Comment> | null;
}
/**
 * Any conversation happening between the end user and assistant is stored in this table
 * @export
 * @interface ConversationOutput
 */
export interface ConversationOutput {
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    sourceType?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    aiAgentId?: string;
    /**
     *
     * @type {Array<DialogLine>}
     * @memberof ConversationOutput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptSummary?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptRecordingUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampStart?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModel}
     * @memberof ConversationOutput
     */
    conversationAnalytics?: ConversationAnalyticsModel | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConversationSourceType {
    BROWSER = "BROWSER",
    TWILIO = "TWILIO",
    PLIVO = "PLIVO"
}
/**
 *
 * @export
 * @interface ConversationStartEvent
 */
export interface ConversationStartEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationStartEventPayload}
     * @memberof ConversationStartEvent
     */
    payload?: ConversationStartEventPayload;
}
/**
 *
 * @export
 * @interface ConversationStartEventPayload
 */
export interface ConversationStartEventPayload {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    type: ConversationStartEventPayloadTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    connection_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    conversation_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    ai_agent_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    org_id: string;
    /**
     *
     * @type {object}
     * @memberof ConversationStartEventPayload
     */
    caller_id: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConversationStartEventPayloadTypeEnum {
    ConversationStart = "conversation_start"
}
/**
 *
 * @export
 * @interface CountryInfo
 */
export interface CountryInfo {
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    name: string;
}
/**
 * Credits details of the business
 * @export
 * @interface Credit
 */
export interface Credit {
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    creditTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    totalAvailable?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    consumed?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationStart?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationEnd?: string;
}
/**
 *
 * @export
 * @interface CustomerCreditRequest
 */
export interface CustomerCreditRequest {
    /**
     * Credit type name
     * @type {string}
     * @memberof CustomerCreditRequest
     */
    creditTypeName: string;
    /**
     * Credit
     * @type {string}
     * @memberof CustomerCreditRequest
     */
    credit: string;
    /**
     * Start date
     * @type {string}
     * @memberof CustomerCreditRequest
     */
    startDate: string;
    /**
     * End date
     * @type {string}
     * @memberof CustomerCreditRequest
     */
    endDate: string;
}
/**
 *
 * @export
 * @interface DialogLine
 */
export interface DialogLine {
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    speaker: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message_id: string;
}
/**
 *
 * @export
 * @interface ExternalReference
 */
export interface ExternalReference {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalReference
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalReference
     */
    id: string;
    /**
     * Props for the external reference
     * @type {object}
     * @memberof ExternalReference
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @interface ExternalServicePorviderInput
 */
export interface ExternalServicePorviderInput {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalServicePorviderInput
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalServicePorviderInput
     */
    id: string;
    /**
     * Props for the external service provider
     * @type {object}
     * @memberof ExternalServicePorviderInput
     */
    providerProps: object | null;
}
/**
 *
 * @export
 * @interface ExternalServicePorviderOutput
 */
export interface ExternalServicePorviderOutput {
    /**
     *
     * @type {string}
     * @memberof ExternalServicePorviderOutput
     */
    providerName: string;
    /**
     *
     * @type {string}
     * @memberof ExternalServicePorviderOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof ExternalServicePorviderOutput
     */
    providerProps: object | null;
}
/**
 * Stores the map of file id with respective file URL in storage manager
 * @export
 * @interface Files
 */
export interface Files {
    /**
     *
     * @type {string}
     * @memberof Files
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileName?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileUrl?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedAt?: string;
}
/**
 * Guest users who are not verified by Trata yet
 * @export
 * @interface GuestInput
 */
export interface GuestInput {
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    role: string;
}
/**
 * Guest users who are not verified by Trata yet. They will not be able to use Trata until they are verified.
 * @export
 * @interface GuestOutput
 */
export interface GuestOutput {
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    role?: string;
    /**
     *
     * @type {boolean}
     * @memberof GuestOutput
     */
    isEmailVerified?: boolean;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    last_sent_date?: string;
    /**
     *
     * @type {number}
     * @memberof GuestOutput
     */
    sent_count?: number;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * Reference to all business knowledge base will be stored in Hive
 * @export
 * @interface Hive
 */
export interface Hive {
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    orgId?: string;
    /**
     *
     * @type {HiveContentOutput}
     * @memberof Hive
     */
    content: HiveContentOutput;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HiveContentInput
 */
export interface HiveContentInput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentInput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentInput
     */
    url?: string | null;
    /**
     * List of file ids to be referenced for the hive
     * @type {Array<string>}
     * @memberof HiveContentInput
     */
    file_ids?: Array<string> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentInput
     */
    hiveProps?: object | null;
}
/**
 *
 * @export
 * @interface HiveContentOutput
 */
export interface HiveContentOutput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentOutput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentOutput
     */
    url?: string | null;
    /**
     * List of files to be referenced for the hive
     * @type {Array<Files>}
     * @memberof HiveContentOutput
     */
    files?: Array<Files> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentOutput
     */
    hiveProps?: object | null;
    /**
     * To add any internal props, add this as props {\"last_crawl_time\": \"123123123123\"}
     * @type {object}
     * @memberof HiveContentOutput
     */
    internalProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum HiveType {
    WEBSITE = "WEBSITE",
    GOOGLEDOCS = "GOOGLE_DOCS",
    DOCS = "DOCS",
    TRANSCRIPTS = "TRANSCRIPTS"
}
/**
 *
 * @export
 * @interface HttpActionEndpoint
 */
export interface HttpActionEndpoint {
    /**
     * Action endpoint URL
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    url: string;
    /**
     * Method to be used for invoking the endpoint
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    method?: HttpActionEndpointMethodEnum;
    /**
     * Headers for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    headers?: object | null;
    /**
     * Payload for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    payload?: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum HttpActionEndpointMethodEnum {
    GET = "GET",
    POST = "POST"
}
/**
 *
 * @export
 * @interface IntelligenceProvider
 */
export interface IntelligenceProvider {
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    providerName?: string | null;
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    model?: string | null;
    /**
     *
     * @type {object}
     * @memberof IntelligenceProvider
     */
    providerProps?: object | null;
}
/**
 * Internal action endpoint to be used for calling the action inside the module. Not used by external users
 * @export
 * @interface InternalActionEndpoint
 */
export interface InternalActionEndpoint {
    /**
     * Module where the action is defined
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    module: string;
    /**
     * Function to be called inside the module
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    _function: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Language {
    English = "English",
    Spanish = "Spanish",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface LanguageAccentCombo
 */
export interface LanguageAccentCombo {
    /**
     *
     * @type {Language}
     * @memberof LanguageAccentCombo
     */
    language: Language;
    /**
     *
     * @type {Accent}
     * @memberof LanguageAccentCombo
     */
    accent: Accent;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MetricName {
    CALLS = "CALLS",
    CALLDURATION = "CALL_DURATION",
    APPOINTMENTSCHEDULED = "APPOINTMENT_SCHEDULED",
    PROSPECTS = "PROSPECTS",
    INTERESTED = "INTERESTED",
    NOTINTERESTED = "NOT_INTERESTED"
}
/**
 *
 * @export
 * @interface MetricResponseDataPoint
 */
export interface MetricResponseDataPoint {
    /**
     * Timestamp of the data point
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    timestamp: string;
    /**
     * Value which will be a string representation of integer or floating number
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    value: string;
}
/**
 *
 * @export
 * @interface MetricsRequest
 */
export interface MetricsRequest {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof MetricsRequest
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricName}
     * @memberof MetricsRequest
     */
    name: MetricName;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof MetricsRequest
     */
    fromDate: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof MetricsRequest
     */
    toDate: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof MetricsRequest
     */
    aggregationPeriod: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {AggregationFormula}
     * @memberof MetricsRequest
     */
    aggregationFormula: AggregationFormula;
}
/**
 *
 * @export
 * @interface MetricsResponse
 */
export interface MetricsResponse {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof MetricsResponse
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricName}
     * @memberof MetricsResponse
     */
    name: MetricName;
    /**
     * List of data points for the metric response
     * @type {Array<MetricResponseDataPoint>}
     * @memberof MetricsResponse
     */
    datapoints: Array<MetricResponseDataPoint>;
}
/**
 *
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * Full prompt instructions for LLM model
     * @type {string}
     * @memberof Mission
     */
    prompt?: string | null;
    /**
     * Objective of the mission
     * @type {string}
     * @memberof Mission
     */
    objective?: string | null;
    /**
     * Greeting message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    greeting: string | null;
    /**
     * Sequence of actions to be performed by the AI agent during the conversation.
     * @type {Array<Sequence>}
     * @memberof Mission
     */
    sequence?: Array<Sequence> | null;
    /**
     * Conclusion message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    farewell?: string | null;
}
/**
 *
 * @export
 * @interface NumberPurchaseRequest
 */
export interface NumberPurchaseRequest {
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    phoneNumber: string;
}
/**
 *
 * @export
 * @interface OrgUsersPriceCredits
 */
export interface OrgUsersPriceCredits {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgUsersPriceCredits
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgUsersPriceCredits
     */
    users: Array<User>;
    /**
     *
     * @type {Price}
     * @memberof OrgUsersPriceCredits
     */
    price?: Price | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof OrgUsersPriceCredits
     */
    credits?: Array<Credit> | null;
    /**
     *
     * @type {string}
     * @memberof OrgUsersPriceCredits
     */
    resellerAdminUserCredentials?: string | null;
}
/**
 *
 * @export
 * @interface OrgWithUsers
 */
export interface OrgWithUsers {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgWithUsers
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgWithUsers
     */
    users: Array<User>;
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationInput
 */
export interface OrganizationInput {
    /**
     * Name of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    name: string;
    /**
     * Address of the organization
     * @type {AddressInput}
     * @memberof OrganizationInput
     */
    address?: AddressInput | null;
    /**
     * Tax details of the organization
     * @type {TaxDetailsInput}
     * @memberof OrganizationInput
     */
    tax?: TaxDetailsInput | null;
    /**
     * External references for the organization
     * @type {Array<ExternalServicePorviderInput>}
     * @memberof OrganizationInput
     */
    externalReferenceIds?: Array<ExternalServicePorviderInput> | null;
    /**
     * Configurations for all the agents going to be created in this org
     * @type {AgentConfig}
     * @memberof OrganizationInput
     */
    agentConfig?: AgentConfig | null;
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationOutput
 */
export interface OrganizationOutput {
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    name?: string;
    /**
     *
     * @type {AgentConfig}
     * @memberof OrganizationOutput
     */
    config: AgentConfig;
    /**
     *
     * @type {AddressOutput}
     * @memberof OrganizationOutput
     */
    address: AddressOutput | null;
    /**
     *
     * @type {TaxDetailsOutput}
     * @memberof OrganizationOutput
     */
    tax: TaxDetailsOutput | null;
    /**
     *
     * @type {Array<ExternalServicePorviderOutput>}
     * @memberof OrganizationOutput
     */
    externalReferenceIds: Array<ExternalServicePorviderOutput> | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedAt?: string;
    /**
     * If the Organization is created by reseller, this field will have the reseller org id as the parent organization id
     * @type {string}
     * @memberof OrganizationOutput
     */
    parentOrgId?: string;
    /**
     * Type of the organization. Currently only CONSUMER & RESELLER are supported
     * @type {string}
     * @memberof OrganizationOutput
     */
    orgType?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationSettings
 */
export interface OrganizationSettings {
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    orgId?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    domain?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    stripeKey?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    brandColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    buttonColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    secondaryColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    favicon?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    faviconUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logo?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logoUrl?: string | null;
}
/**
 *
 * @export
 * @interface PlanDetails
 */
export interface PlanDetails {
    /**
     * Product name
     * @type {string}
     * @memberof PlanDetails
     */
    productName: string;
    /**
     * Product description
     * @type {string}
     * @memberof PlanDetails
     */
    description: string;
    /**
     *
     * @type {Array<Price>}
     * @memberof PlanDetails
     */
    pricingDetails: Array<Price>;
}
/**
 * Price details of the business
 * @export
 * @interface Price
 */
export interface Price {
    /**
     *
     * @type {string}
     * @memberof Price
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    planName?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    priceName?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    price?: number;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    interval?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    stripePriceId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    stripeProductId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    priceType?: string;
}
/**
 *
 * @export
 * @interface PriceUpdateRequest
 */
export interface PriceUpdateRequest {
    /**
     * Product name
     * @type {string}
     * @memberof PriceUpdateRequest
     */
    productName: string;
    /**
     * Price name
     * @type {string}
     * @memberof PriceUpdateRequest
     */
    priceName: string;
    /**
     *
     * @type {number}
     * @memberof PriceUpdateRequest
     */
    newPrice: number;
}
/**
 *
 * @export
 * @interface ProductInput
 */
export interface ProductInput {
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductInput
     */
    active: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductInput
     */
    defaultPrice: number;
    /**
     * Currency of the product
     * @type {string}
     * @memberof ProductInput
     */
    currency: ProductInputCurrencyEnum;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductInput
     */
    description: string;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductInput
     */
    name: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductInput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductInput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductInput
     */
    props?: object | null;
    /**
     * Tags for the product. This is used for grouping purpose. Eg: [\"gardening\", \"tools\"]
     * @type {Array<string>}
     * @memberof ProductInput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {Status}
     * @memberof ProductInput
     */
    status: Status;
    /**
     * List of agent ids which are accessible for this product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    agentIds?: Array<string> | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProductInputCurrencyEnum {
    AED = "AED",
    AFN = "AFN",
    ALL = "ALL",
    AMD = "AMD",
    ANG = "ANG",
    AOA = "AOA",
    ARS = "ARS",
    AUD = "AUD",
    AWG = "AWG",
    AZN = "AZN",
    BAM = "BAM",
    BBD = "BBD",
    BDT = "BDT",
    BGN = "BGN",
    BHD = "BHD",
    BIF = "BIF",
    BMD = "BMD",
    BND = "BND",
    BOB = "BOB",
    BOV = "BOV",
    BRL = "BRL",
    BSD = "BSD",
    BTN = "BTN",
    BWP = "BWP",
    BYN = "BYN",
    BZD = "BZD",
    CAD = "CAD",
    CDF = "CDF",
    CHE = "CHE",
    CHF = "CHF",
    CHW = "CHW",
    CLF = "CLF",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    COU = "COU",
    CRC = "CRC",
    CUC = "CUC",
    CUP = "CUP",
    CVE = "CVE",
    CZK = "CZK",
    DJF = "DJF",
    DKK = "DKK",
    DOP = "DOP",
    DZD = "DZD",
    EGP = "EGP",
    ERN = "ERN",
    ETB = "ETB",
    EUR = "EUR",
    FJD = "FJD",
    FKP = "FKP",
    GBP = "GBP",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GMD = "GMD",
    GNF = "GNF",
    GTQ = "GTQ",
    GYD = "GYD",
    HKD = "HKD",
    HNL = "HNL",
    HRK = "HRK",
    HTG = "HTG",
    HUF = "HUF",
    IDR = "IDR",
    ILS = "ILS",
    INR = "INR",
    IQD = "IQD",
    IRR = "IRR",
    ISK = "ISK",
    JMD = "JMD",
    JOD = "JOD",
    JPY = "JPY",
    KES = "KES",
    KGS = "KGS",
    KHR = "KHR",
    KMF = "KMF",
    KPW = "KPW",
    KRW = "KRW",
    KWD = "KWD",
    KYD = "KYD",
    KZT = "KZT",
    LAK = "LAK",
    LBP = "LBP",
    LKR = "LKR",
    LRD = "LRD",
    LSL = "LSL",
    LYD = "LYD",
    MAD = "MAD",
    MDL = "MDL",
    MGA = "MGA",
    MKD = "MKD",
    MMK = "MMK",
    MNT = "MNT",
    MOP = "MOP",
    MRU = "MRU",
    MUR = "MUR",
    MVR = "MVR",
    MWK = "MWK",
    MXN = "MXN",
    MXV = "MXV",
    MYR = "MYR",
    MZN = "MZN",
    NAD = "NAD",
    NGN = "NGN",
    NIO = "NIO",
    NOK = "NOK",
    NPR = "NPR",
    NZD = "NZD",
    OMR = "OMR",
    PAB = "PAB",
    PEN = "PEN",
    PGK = "PGK",
    PHP = "PHP",
    PKR = "PKR",
    PLN = "PLN",
    PYG = "PYG",
    QAR = "QAR",
    RON = "RON",
    RSD = "RSD",
    RUB = "RUB",
    RWF = "RWF",
    SAR = "SAR",
    SBD = "SBD",
    SCR = "SCR",
    SDG = "SDG",
    SEK = "SEK",
    SGD = "SGD",
    SHP = "SHP",
    SLE = "SLE",
    SLL = "SLL",
    SOS = "SOS",
    SRD = "SRD",
    SSP = "SSP",
    STN = "STN",
    SVC = "SVC",
    SYP = "SYP",
    SZL = "SZL",
    THB = "THB",
    TJS = "TJS",
    TMT = "TMT",
    TND = "TND",
    TOP = "TOP",
    TRY = "TRY",
    TTD = "TTD",
    TWD = "TWD",
    TZS = "TZS",
    UAH = "UAH",
    UGX = "UGX",
    USD = "USD",
    USN = "USN",
    UYI = "UYI",
    UYU = "UYU",
    UYW = "UYW",
    UZS = "UZS",
    VED = "VED",
    VES = "VES",
    VND = "VND",
    VUV = "VUV",
    WST = "WST",
    XAF = "XAF",
    XCD = "XCD",
    XOF = "XOF",
    XPF = "XPF",
    XSU = "XSU",
    XUA = "XUA",
    YER = "YER",
    ZAR = "ZAR",
    ZMW = "ZMW",
    ZWL = "ZWL"
}
/**
 * Product and services offered by the business
 * @export
 * @interface ProductOutput
 */
export interface ProductOutput {
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    orgId?: string;
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    active?: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductOutput
     */
    defaultPrice?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    currency?: string | null;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductOutput
     */
    description?: string | null;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductOutput
     */
    name?: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductOutput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductOutput
     */
    props?: object | null;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ProductWithAgents
 */
export interface ProductWithAgents {
    /**
     *
     * @type {ProductOutput}
     * @memberof ProductWithAgents
     */
    product: ProductOutput;
    /**
     *
     * @type {Array<AIAgentOutput>}
     * @memberof ProductWithAgents
     */
    agents?: Array<AIAgentOutput>;
}
/**
 *
 * @export
 * @interface PromptTemplate
 */
export interface PromptTemplate {
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    prompt: string;
    /**
     *
     * @type {Array<Sequence>}
     * @memberof PromptTemplate
     */
    sequences: Array<Sequence>;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    roleDescription: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    name: string;
}
/**
 *
 * @export
 * @interface ProspectInput
 */
export interface ProspectInput {
    /**
     * Name of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    name?: string | null;
    /**
     * Email of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    email?: string | null;
    /**
     * Phone number of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    phoneNumber?: string | null;
    /**
     * External references for the prospect
     * @type {Array<ExternalReference>}
     * @memberof ProspectInput
     */
    externalReference?: Array<ExternalReference> | null;
    /**
     *
     * @type {ProspectStatus}
     * @memberof ProspectInput
     */
    status: ProspectStatus;
    /**
     * Props for the prospect
     * @type {object}
     * @memberof ProspectInput
     */
    prospectProps?: object | null;
}
/**
 * Prospects are the potential customers for business
 * @export
 * @interface ProspectOutput
 */
export interface ProspectOutput {
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof ProspectOutput
     */
    externalReference: Array<ExternalReference> | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    status: string;
    /**
     *
     * @type {object}
     * @memberof ProspectOutput
     */
    prospectProps: object | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ProspectStatus {
    NEW = "NEW",
    GENERALENQUIRY = "GENERAL_ENQUIRY",
    SCHEDULEDCALLBACKWITHBOT = "SCHEDULED_CALLBACK_WITH_BOT",
    SCHEDULEDAPPOINTMENTWITHPERSON = "SCHEDULED_APPOINTMENT_WITH_PERSON",
    SCHEDULEDAPPOINTMENTFORSERVICE = "SCHEDULED_APPOINTMENT_FOR_SERVICE",
    NOTINTERESTED = "NOT_INTERESTED",
    PRODUCTORDERPLACED = "PRODUCT_ORDER_PLACED",
    SERVICEORDERPLACED = "SERVICE_ORDER_PLACED"
}
/**
 *
 * @export
 * @interface ResellerBatchMetricsRequests
 */
export interface ResellerBatchMetricsRequests {
    /**
     *
     * @type {Array<string>}
     * @memberof ResellerBatchMetricsRequests
     */
    organization: Array<string>;
    /**
     *
     * @type {Array<MetricsRequest>}
     * @memberof ResellerBatchMetricsRequests
     */
    requests: Array<MetricsRequest>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Role {
    ADMIN = "ADMIN",
    READONLY = "READ_ONLY",
    RESELLERADMIN = "RESELLER_ADMIN"
}
/**
 *
 * @export
 * @interface RoleTemplate
 */
export interface RoleTemplate {
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleName: string;
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleDescription: string;
}
/**
 *
 * @export
 * @interface Sequence
 */
export interface Sequence {
    /**
     * Name of the stage
     * @type {string}
     * @memberof Sequence
     */
    stageName: string;
    /**
     * Description of the stage
     * @type {string}
     * @memberof Sequence
     */
    description: string;
    /**
     * Other notes that AI agent should know in this stage of conversation
     * @type {string}
     * @memberof Sequence
     */
    otherNotes?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SortOrder {
    Asc = "asc",
    Desc = "desc"
}
/**
 *
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    no_of_prospects: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    appointment_scheduled: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    unqualified: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    average_call_duration: number;
}
/**
 *
 * @export
 * @interface StatsResponse
 */
export interface StatsResponse {
    /**
     * Overall stats of prospects
     * @type {StatsData}
     * @memberof StatsResponse
     */
    response: StatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Status {
    Active = "active",
    Inactive = "inactive"
}
/**
 * Subscription details of the business
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    subscriptionTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    planName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    priceId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    stripeSubscriptionId?: string;
    /**
     *
     * @type {number}
     * @memberof Subscription
     */
    billingCycleStartDate?: number;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedAt?: string;
}
/**
 * Subscription details of the business
 * @export
 * @interface SubscriptionInfo
 */
export interface SubscriptionInfo {
    /**
     *
     * @type {Subscription}
     * @memberof SubscriptionInfo
     */
    subscription?: Subscription | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof SubscriptionInfo
     */
    credits?: Array<Credit> | null;
}
/**
 *
 * @export
 * @interface TaxDetailsInput
 */
export interface TaxDetailsInput {
    /**
     * Tax identifier
     * @type {string}
     * @memberof TaxDetailsInput
     */
    id: string;
    /**
     * Any extra info related to Tax
     * @type {object}
     * @memberof TaxDetailsInput
     */
    taxProps: object | null;
}
/**
 *
 * @export
 * @interface TaxDetailsOutput
 */
export interface TaxDetailsOutput {
    /**
     *
     * @type {string}
     * @memberof TaxDetailsOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof TaxDetailsOutput
     */
    taxProps: object | null;
}
/**
 * Telephone number details of the business
 * @export
 * @interface TelephoneNumber
 */
export interface TelephoneNumber {
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    phoneNumber?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    countryCode?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    agentId?: string | null;
    /**
     *
     * @type {object}
     * @memberof TelephoneNumber
     */
    internalProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Transcriber
 */
export interface Transcriber {
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    providerName?: string;
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    transcriberModel?: string | null;
    /**
     *
     * @type {object}
     * @memberof Transcriber
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @interface UpdateResellerOrganizationRequest
 */
export interface UpdateResellerOrganizationRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateResellerOrganizationRequest
     */
    name?: string | null;
    /**
     *
     * @type {AddressInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    address?: AddressInput | null;
    /**
     *
     * @type {TaxDetailsInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    tax?: TaxDetailsInput | null;
}
/**
 * Payload for updating user details API
 * @export
 * @interface UpdateUserPayload
 */
export interface UpdateUserPayload {
    /**
     *
     * @type {Role}
     * @memberof UpdateUserPayload
     */
    role: Role | null;
    /**
     *
     * @type {string}
     * @memberof UpdateUserPayload
     */
    fullName: string | null;
}
/**
 * Model representing the users under an organization
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
}
/**
 * User id to api key mapping table
 * @export
 * @interface UserApiKeyLink
 */
export interface UserApiKeyLink {
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    secretKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    keyType?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    expiresAt?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserApiKeyLink
     */
    isActive?: boolean;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    loc: Array<string | number>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 *
 * @export
 * @interface VoiceInput
 */
export interface VoiceInput {
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    gender: VoiceInputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceInput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    modelId: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceInputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 *
 * @export
 * @interface VoiceModel
 */
export interface VoiceModel {
    /**
     *
     * @type {VoiceOutput}
     * @memberof VoiceModel
     */
    voice: VoiceOutput;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    previewUrl: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    voiceDescription: string;
}
/**
 *
 * @export
 * @interface VoiceOutput
 */
export interface VoiceOutput {
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    gender: VoiceOutputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceOutput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    modelId: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceOutputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 * ActionAgentLinkApi - axios parameter creator
 * @export
 */
export declare const ActionAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionAgentLinkApi - functional programming interface
 * @export
 */
export declare const ActionAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
};
/**
 * ActionAgentLinkApi - factory interface
 * @export
 */
export declare const ActionAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<ActionOutput>>;
};
/**
 * ActionAgentLinkApi - object-oriented interface
 * @export
 * @class ActionAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class ActionAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1: (actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1: (actionId: string, actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): AxiosPromise<ActionOutput>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ActionOutput>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    deleteActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
}
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export declare const AgentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1: (aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1: (agentId: string, aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
};
/**
 * AgentsApi - functional programming interface
 * @export
 */
export declare const AgentsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
};
/**
 * AgentsApi - factory interface
 * @export
 */
export declare const AgentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
};
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export declare class AgentsApi extends BaseAPI {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    getAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
}
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export declare const AnalyticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost: (batchMetricsRequests: BatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export declare const AnalyticsApiFp: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponse>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsResponse>>;
};
/**
 * AnalyticsApi - factory interface
 * @export
 */
export declare const AnalyticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): AxiosPromise<BatchMetricsResponse>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(options?: any): AxiosPromise<StatsResponse>;
};
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsApi extends BaseAPI {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponse>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getOverallStatsV1StatsGet(options?: any): Promise<import("axios").AxiosResponse<StatsResponse>>;
}
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export declare const ApiKeyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1: (apiKeyRequest: ApiKeyRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1: (keyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export declare const ApiKeyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserApiKeyLink>>>;
};
/**
 * ApiKeyApi - factory interface
 * @export
 */
export declare const ApiKeyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): AxiosPromise<Array<UserApiKeyLink>>;
};
/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
export declare class ApiKeyApi extends BaseAPI {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    getCallKeyV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    listApiKeysV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink[]>>;
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export declare const BillingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1: (billableProductId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export declare const BillingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionInfo>>;
};
/**
 * BillingApi - factory interface
 * @export
 */
export declare const BillingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): AxiosPromise<SubscriptionInfo>;
};
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export declare class BillingApi extends BaseAPI {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getCustomerSessionSecretV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionPortalV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionV1(options?: any): Promise<import("axios").AxiosResponse<SubscriptionInfo>>;
}
/**
 * ConversationProspectLinkApi - axios parameter creator
 * @export
 */
export declare const ConversationProspectLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationProspectLinkApi - functional programming interface
 * @export
 */
export declare const ConversationProspectLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
};
/**
 * ConversationProspectLinkApi - factory interface
 * @export
 */
export declare const ConversationProspectLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
};
/**
 * ConversationProspectLinkApi - object-oriented interface
 * @export
 * @class ConversationProspectLinkApi
 * @extends {BaseAPI}
 */
export declare class ConversationProspectLinkApi extends BaseAPI {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
}
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export declare const ConversationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1: (conversationId: string, comment: Comment, options?: any) => Promise<RequestArgs>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1: (conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1: (conversationId: string, conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationsApi - functional programming interface
 * @export
 */
export declare const ConversationsApiFp: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
};
/**
 * ConversationsApi - factory interface
 * @export
 */
export declare const ConversationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): AxiosPromise<ConversationFeedback>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ConversationOutput>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
};
/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export declare class ConversationsApi extends BaseAPI {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<import("axios").AxiosResponse<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    getConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
}
/**
 * DataPlaneApi - axios parameter creator
 * @export
 */
export declare const DataPlaneApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection: (agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml: (connectionId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DataPlaneApi - functional programming interface
 * @export
 */
export declare const DataPlaneApiFp: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Connection>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
};
/**
 * DataPlaneApi - factory interface
 * @export
 */
export declare const DataPlaneApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): AxiosPromise<Connection>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): AxiosPromise<BaseResponse>;
};
/**
 * DataPlaneApi - object-oriented interface
 * @export
 * @class DataPlaneApi
 * @extends {BaseAPI}
 */
export declare class DataPlaneApi extends BaseAPI {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<import("axios").AxiosResponse<Connection>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
}
/**
 * FilesApi - axios parameter creator
 * @export
 */
export declare const FilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1: (files: Array<any>, validator?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1: (files: Array<any>, options?: any) => Promise<RequestArgs>;
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export declare const FilesApiFp: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
};
/**
 * FilesApi - factory interface
 * @export
 */
export declare const FilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): AxiosPromise<Array<Files>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): AxiosPromise<Array<Files>>;
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export declare class FilesApi extends BaseAPI {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteFileV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): AxiosPromise<object>;
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * HiveApi - axios parameter creator
 * @export
 */
export declare const HiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1: (hiveContentInput: HiveContentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1: (hiveId: string, hiveContentOutput: HiveContentOutput, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveApi - functional programming interface
 * @export
 */
export declare const HiveApiFp: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
};
/**
 * HiveApi - factory interface
 * @export
 */
export declare const HiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): AxiosPromise<Hive>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): AxiosPromise<Hive>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<Hive>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): AxiosPromise<Hive>;
};
/**
 * HiveApi - object-oriented interface
 * @export
 * @class HiveApi
 * @extends {BaseAPI}
 */
export declare class HiveApi extends BaseAPI {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    getHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
}
/**
 * HiveAgentLinkApi - axios parameter creator
 * @export
 */
export declare const HiveAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveAgentLinkApi - functional programming interface
 * @export
 */
export declare const HiveAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
};
/**
 * HiveAgentLinkApi - factory interface
 * @export
 */
export declare const HiveAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<Hive>>;
};
/**
 * HiveAgentLinkApi - object-oriented interface
 * @export
 * @class HiveAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class HiveAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
}
/**
 * InternalApi - axios parameter creator
 * @export
 */
export declare const InternalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1: (bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1: (guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1: (orgId: string, organizationInput: OrganizationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1: (userId: string, updateUserPayload: UpdateUserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * InternalApi - functional programming interface
 * @export
 */
export declare const InternalApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings | object>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * InternalApi - factory interface
 * @export
 */
export declare const InternalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): AxiosPromise<BaseResponse>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): AxiosPromise<OrganizationSettings | object>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): AxiosPromise<User>;
};
/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export declare class InternalApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationBrandingV1(options?: any): Promise<import("axios").AxiosResponse<object | OrganizationSettings>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    sendInviteV1(guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1: (productInput: ProductInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1: (productId: string, productInput: ProductInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOutput>>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): AxiosPromise<ProductOutput>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): AxiosPromise<Array<ProductOutput>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ProductOutput[]>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
}
/**
 * ProspectsApi - axios parameter creator
 * @export
 */
export declare const ProspectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1: (prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1: (prospectId: string, prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProspectsApi - functional programming interface
 * @export
 */
export declare const ProspectsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProspectOutput>>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
};
/**
 * ProspectsApi - factory interface
 * @export
 */
export declare const ProspectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ProspectOutput>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
};
/**
 * ProspectsApi - object-oriented interface
 * @export
 * @class ProspectsApi
 * @extends {BaseAPI}
 */
export declare class ProspectsApi extends BaseAPI {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    getProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput[]>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
}
/**
 * ResellerApi - axios parameter creator
 * @export
 */
export declare const ResellerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Add customer credit
     * @summary Add Customer Credit
     * @param {string} customerOrgId
     * @param {Array<CustomerCreditRequest>} customerCreditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerCreditV1: (customerOrgId: string, customerCreditRequest: Array<CustomerCreditRequest>, options?: any) => Promise<RequestArgs>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1: (bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1: (bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a customer organization by id under a reseller organization
     * @summary Get Customer Org
     * @param {string} customerOrgId
     * @param {boolean} [includeUsers]
     * @param {boolean} [includeResellerAdminCredentials]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerOrganizationV1: (customerOrgId: string, includeUsers?: boolean, includeResellerAdminCredentials?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1: (resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get reseller pricing for customer
     * @summary Get Reseller Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all the customer organizations under a reseller organization
     * @summary List Customers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerOrganizationsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1: (guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Update customer pricing
     * @summary Reseller Customer Pricing Update
     * @param {string} customerOrgId
     * @param {Array<PriceUpdateRequest>} priceUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1: (customerOrgId: string, priceUpdateRequest: Array<PriceUpdateRequest>, options?: any) => Promise<RequestArgs>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1: (updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1: (userId: string, updateUserPayload: UpdateUserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerApi - functional programming interface
 * @export
 */
export declare const ResellerApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Add customer credit
     * @summary Add Customer Credit
     * @param {string} customerOrgId
     * @param {Array<CustomerCreditRequest>} customerCreditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerCreditV1(customerOrgId: string, customerCreditRequest: Array<CustomerCreditRequest>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get a customer organization by id under a reseller organization
     * @summary Get Customer Org
     * @param {string} customerOrgId
     * @param {boolean} [includeUsers]
     * @param {boolean} [includeResellerAdminCredentials]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerOrganizationV1(customerOrgId: string, includeUsers?: boolean, includeResellerAdminCredentials?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUsersPriceCredits>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponse>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWithUsers>>;
    /**
     * Get reseller pricing for customer
     * @summary Get Reseller Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlanDetails>>>;
    /**
     * Lists all the customer organizations under a reseller organization
     * @summary List Customers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerOrganizationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgUsersPriceCredits>>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Update customer pricing
     * @summary Reseller Customer Pricing Update
     * @param {string} customerOrgId
     * @param {Array<PriceUpdateRequest>} priceUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceUpdateRequest: Array<PriceUpdateRequest>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * ResellerApi - factory interface
 * @export
 */
export declare const ResellerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Add customer credit
     * @summary Add Customer Credit
     * @param {string} customerOrgId
     * @param {Array<CustomerCreditRequest>} customerCreditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCustomerCreditV1(customerOrgId: string, customerCreditRequest: Array<CustomerCreditRequest>, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): AxiosPromise<string>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(customerOrgId: string, options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get a customer organization by id under a reseller organization
     * @summary Get Customer Org
     * @param {string} customerOrgId
     * @param {boolean} [includeUsers]
     * @param {boolean} [includeResellerAdminCredentials]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerOrganizationV1(customerOrgId: string, includeUsers?: boolean, includeResellerAdminCredentials?: boolean, options?: any): AxiosPromise<OrgUsersPriceCredits>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): AxiosPromise<BatchMetricsResponse>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): AxiosPromise<OrgWithUsers>;
    /**
     * Get reseller pricing for customer
     * @summary Get Reseller Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1(customerOrgId: string, options?: any): AxiosPromise<Array<PlanDetails>>;
    /**
     * Lists all the customer organizations under a reseller organization
     * @summary List Customers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerOrganizationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<OrgUsersPriceCredits>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1(options?: any): AxiosPromise<BaseResponse>;
    /**
     * Update customer pricing
     * @summary Reseller Customer Pricing Update
     * @param {string} customerOrgId
     * @param {Array<PriceUpdateRequest>} priceUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceUpdateRequest: Array<PriceUpdateRequest>, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): AxiosPromise<User>;
};
/**
 * ResellerApi - object-oriented interface
 * @export
 * @class ResellerApi
 * @extends {BaseAPI}
 */
export declare class ResellerApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Add customer credit
     * @summary Add Customer Credit
     * @param {string} customerOrgId
     * @param {Array<CustomerCreditRequest>} customerCreditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    addCustomerCreditV1(customerOrgId: string, customerCreditRequest: Array<CustomerCreditRequest>, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerCreditsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get a customer organization by id under a reseller organization
     * @summary Get Customer Org
     * @param {string} customerOrgId
     * @param {boolean} [includeUsers]
     * @param {boolean} [includeResellerAdminCredentials]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerOrganizationV1(customerOrgId: string, includeUsers?: boolean, includeResellerAdminCredentials?: boolean, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getOrganizationSettingsV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponse>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrgWithUsers>>;
    /**
     * Get reseller pricing for customer
     * @summary Get Reseller Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerPricingV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<PlanDetails[]>>;
    /**
     * Lists all the customer organizations under a reseller organization
     * @summary List Customers
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    listCustomerOrganizationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits[]>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    stripeSyncV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Update customer pricing
     * @summary Reseller Customer Pricing Update
     * @param {string} customerOrgId
     * @param {Array<PriceUpdateRequest>} priceUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateCustomerPricingV1(customerOrgId: string, priceUpdateRequest: Array<PriceUpdateRequest>, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * TelephonyApi - axios parameter creator
 * @export
 */
export declare const TelephonyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1: (countryCode: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1: (countryCode?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1: (numberPurchaseRequest: NumberPurchaseRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1: (phoneId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TelephonyApi - functional programming interface
 * @export
 */
export declare const TelephonyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AvailablePhoneNumber>>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryInfo>>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
};
/**
 * TelephonyApi - factory interface
 * @export
 */
export declare const TelephonyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): AxiosPromise<Array<AvailablePhoneNumber>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): AxiosPromise<Array<CountryInfo>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): AxiosPromise<TelephoneNumber>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
};
/**
 * TelephonyApi - object-oriented interface
 * @export
 * @class TelephonyApi
 * @extends {BaseAPI}
 */
export declare class TelephonyApi extends BaseAPI {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<import("axios").AxiosResponse<AvailablePhoneNumber[]>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listSupportedCountriesV1(options?: any): Promise<import("axios").AxiosResponse<CountryInfo[]>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
}
/**
 * UIApi - axios parameter creator
 * @export
 */
export declare const UIApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UIApi - functional programming interface
 * @export
 */
export declare const UIApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionInput>>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWithAgents>>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTemplate>>>;
};
/**
 * UIApi - factory interface
 * @export
 */
export declare const UIApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): AxiosPromise<Array<ActionInput>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): AxiosPromise<Array<ProductWithAgents>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): AxiosPromise<{
        [key: string]: PromptTemplate;
    }>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): AxiosPromise<Array<RoleTemplate>>;
};
/**
 * UIApi - object-oriented interface
 * @export
 * @class UIApi
 * @extends {BaseAPI}
 */
export declare class UIApi extends BaseAPI {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<ActionInput[]>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy] Field name to search by
     * @param {string} [searchValue] Value to search for in the specified field
     * @param {string} [status] Filter by status
     * @param {string} [sortBy] Field to sort by
     * @param {SortOrder} [sortOrder] Sort order (asc or desc)
     * @param {number} [skip] Number of records to skip
     * @param {number} [limit] Maximum number of records to return
     * @param {Array<string>} [tags] Filter products by specific tags
     * @param {Array<string>} [productIds] Filter by specific product IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, productIds?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ProductWithAgents[]>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<RoleTemplate[]>>;
}
/**
 * VoiceModelsApi - axios parameter creator
 * @export
 */
export declare const VoiceModelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * VoiceModelsApi - functional programming interface
 * @export
 */
export declare const VoiceModelsApiFp: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoiceModel>>>;
};
/**
 * VoiceModelsApi - factory interface
 * @export
 */
export declare const VoiceModelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): AxiosPromise<Array<VoiceModel>>;
};
/**
 * VoiceModelsApi - object-oriented interface
 * @export
 * @class VoiceModelsApi
 * @extends {BaseAPI}
 */
export declare class VoiceModelsApi extends BaseAPI {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceModelsApi
     */
    listVoiceModelsV1(options?: any): Promise<import("axios").AxiosResponse<VoiceModel[]>>;
}
